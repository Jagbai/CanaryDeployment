name: Deploy to ECR

on:
 
  push:
    branches: [ master ]

jobs:
  
  deploy:

    name: Run tests
    // Insert tests here sonarqube etc
    
    name: Build Image
    depends-on: Run tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ruby-server
        IMAGE_TAG: ruby_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG    
   
    - name: Get task information
      id: get-task-info
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        service=$(aws ecs list-tags-for-resource --resource-arn arn:aws:ecs:eu-west-1::service/rscluster/rsservice | jq -r '.tags[] | select(.key == "StableService") | .value)
        // Find stable service 
        TASKSETID=$(aws ecs describe-task-sets --cluster rscluster --service rsservice --task-sets   --query 'taskSets[?externalid==`${service}`].id'  --output text)
        // Extract task set id
        echo ::set-output name=OldAppVersion::$(aws ecs describe-task-definition --task-definition rubyservice --query 'taskDefinition[*].containerDefintions[*].environment[?name==APPVERSION].value' --output text  )
        // Extract app version

    - name: Create new task definition revision
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition — task-definition rubyservice} — region=”eu-west-1")

        echo ::set-output name=AppVersion::$(sh scripts/version.sh ${{ steps.get-task-info.outputs.OldAppVersion }} )
        echo $ TASK_DEFINITION | jq ‘.containerDefinitions[0].environment.value=’\”${ AppVersion }\” \ > task-def.json 
        aws ecs register-task-definition — family rubyservice — region=”eu-west-1" — cli-input-json file://task-def.json

    - name: Rebalance traffic
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |  
        if [$TASKSETID == "Blue"]; then
        aws elbv2 modify-rule \
        --rule-arn "arn:aws:elasticloadbalancing:eu-west-1::listener-rule/app/rslistener/..." \
        --actions '[{
          "Type": "forward",
          "Order": 10, 
          "ForwardConfig": {
            "TargetGroups": [
              { 
                "Weight": 90, 
                "TargetGroupArn": "arn:aws:elasticloadbalancing:eu-west-1::targetgroup/BlueTargetGroup/*" 
              },
              { 
                "Weight": 10, 
                "TargetGroupArn": "arn:aws:elasticloadbalancing:eu-west-1::targetgroup/GreenTargetGroup/*" 
              }
            ]
          }
        }]'
        else
        aws elbv2 modify-rule \
        --rule-arn "arn:aws:elasticloadbalancing:eu-west-1::listener-rule/app/rslistener..." \
        --actions '[{
          "Type": "forward",
          "Order": 10, 
          "ForwardConfig": {
            "TargetGroups": [
              { 
                "Weight": 90, 
                "TargetGroupArn": "arn:aws:elasticloadbalancing:eu-west-1::targetgroup/GreenTargetGroup/*" 
              },
              { 
                "Weight": 10, 
                "TargetGroupArn": "arn:aws:elasticloadbalancing:eu-west-1::targetgroup/BlueTargetGroup/*" 
              }
            ]
          }
        }]'
        fi
        // Change weight

        // Run tests

        // If tests good then
        aws ecs tag-resource --resource-arn arn:aws:ecs:eu-west-1::service/rscluster/rsservice --tags key=StableService,value=$TASKSETID

        // else change weight back

